import { app, BrowserWindow, screen, ipcMain, shell, dialog, globalShortcut, Notification, Menu, Tray, autoUpdater } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

import * as path from 'path';

const APP_VERSION = app.getVersion();

// The url that the application is going to query for new release
const AUTO_UPDATE_URL = { url: 'https://api.update.rocks/update/github.com/MarioPon11/graphxtime-releases/stable/' + process.platform + '/' + APP_VERSION };

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 800,
    width: 600,
    resizable: false,
    frame: false,
    skipTaskbar: true,
    icon: path.join(__dirname, './assets/icons/GXS-Checklist.ico'),
    x: screen.getPrimaryDisplay().workAreaSize.width - 610,
    y: screen.getPrimaryDisplay().workAreaSize.height - 810,
    alwaysOnTop: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: true,
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.on('blur', () => {
    // mainWindow.hide();
  });


};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();

  const tray = new Tray(path.join(__dirname, './assets/icons/GXS-Checklist.ico'));
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Show', click: () => { mainWindow.show(); } },
    { label: 'Quit', click: () => { app.quit(); } },
  ]);
  tray.setToolTip('GXS Checklist');
  tray.setContextMenu(contextMenu);
  tray.on('click', () => {
    mainWindow.show();
  });

  init();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


function init(): void {
  if (process.platform === 'linux') {
    console.log('Auto updates not available on linux');
  } else {
    initDarwinWin32();
  }
}

function initDarwinWin32(): void {
  autoUpdater.on('error', (err) => console.error(`Update error: ${err.message}`));
  autoUpdater.on('checking-for-update', () => console.log('Checking for update'));
  autoUpdater.on('update-available', () => console.log('Update available'));
  autoUpdater.on('update-not-available', () => console.log('No update available'));

  autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {
    dialog.showMessageBox(mainWindow, {
      type: 'question',
      buttons: ['Update', 'Cancel'],
      defaultId: 0,
      message: `Version ${releaseName} is available, do you want to install it now?`,
      title: 'Update available'
    }).then(({ response }) => {
      if (response === 0) {
        autoUpdater.quitAndInstall();
      }
    });
  });

  autoUpdater.setFeedURL(AUTO_UPDATE_URL);
  autoUpdater.checkForUpdates();
}